#!/usr/bin/env node

const { Client } = require('pg');
const readline = require('readline');
const { argv } = require('node:process');

function logAndExit(err) {
  console.log(err);
  process.exit(1);
};

class ExpenseData {
  constructor() {
    this.client = new Client({ database: 'expenses' });
  }

  async addExpense(amount, memo) {
    await this.client.connect().catch(error => logAndExit(error));
    let date = (new Date()).toLocaleDateString();
    let query = 'INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3) RETURNING *';
    let values = [amount, memo, date];

    await this.client.query(query, values)
      .catch(error => logAndExit(error));
    await this.client.end().catch(error => logAndExit(error));
  }

  async listExpenses() {
    await this.client.connect().catch(error => logAndExit(error));

    let data = await this.client.query('SELECT * FROM expenses ORDER BY created_on ASC')
      .catch(error => logAndExit(error));
    this.displayCount(data.rowCount);
    this.displayExpenses(data);
    if (data.rowCount > 1) {
      this.displayTotal(data.rows);
    }

    await this.client.end().catch(error => logAndExit(error));
  }

  async searchExpenses(searchTerm) {
    await this.client.connect().catch(error => logAndExit(error));
    let query = 'SELECT * FROM expenses WHERE memo ILIKE $1';
    let data = await this.client.query(query, [`%${searchTerm}%`])
      .catch(error => logAndExit(error));
    this.displayCount(data.rows);
    this.displayExpenses(data);
    if (data.rowCount > 1) {
      this.displayTotal(data.rows);
    }

    await this.client.end().catch(error => logAndExit(error));
  }

  displayExpenses(data) {
    data.rows.forEach(row => {
    let { id, amount, memo, created_on } = row;
      console.log(`${String(id).padStart(3)} | ${created_on.toDateString().padStart(10)} | ${amount.padStart(12)} | ${memo}`);
    });
  }

  async deleteExpense(id) {
    await this.client.connect().catch(error => logAndExit(error));
    let query = 'SELECT * FROM expenses WHERE id = $1';
    let data = await this.client.query(query, [id])
      .catch(error => logAndExit(error));
    if (data.rowCount !== 0) {
      let query = 'DELETE FROM expenses WHERE id = $1';
      await this.client.query(query, [id]).catch(error => logAndExit(error));
      console.log('The following expense has been deleted:');
      this.displayExpenses(data);
    } else {
      console.log(`There is no expense with the id '${id}'.`);
    }

    await this.client.end().catch(error => logAndExit(error));
  }

  async deleteAllExpenses() {
    await this.client.connect().catch(error => logAndExit(error));
    await this.client.query('DELETE FROM expenses').catch(error => logAndExit(error));
    console.log('All expenses have been deleted.');
  
    await this.client.end().catch(error => logAndExit(error));
  }

  displayCount(rowCount) {
    if (rowCount === 0) {
      console.log('There are no expenses.');
    } else if (rowCount === 1) {
      console.log('There is 1 expense.');
    } else {
      console.log(`There are ${rowCount} expenses.`);
    }
  }

  displayTotal(rows) {
    let total = rows.reduce((acc, row) => acc + Number(row.amount), 0);
    console.log('--------------------------------------------------');
    console.log(`Total ${String(total).padStart(30)}`);
  }
}

class CLI {
  static HELP() {
    return `An expense recording system

Commands:

add AMOUNT MEMO [DATE] - record a new expense
clear - delete all expenses
list - list all expenses
delete NUMBER - remove expense with id NUMBER
search QUERY - list expenses with a matching memo field
`;
  }
  constructor() {
    this.expenses = new ExpenseData();
  }

  displayHelp() {
    console.log(CLI.HELP());
  }

  run(parameters) {
    let command = parameters[2];
    if (command === 'list') {
      this.expenses.listExpenses();
    } else if (command === 'add') {
      let [ amount, memo ] = argv.slice(3);
      if (amount && memo) {
        this.expenses.addExpense(amount, memo);
      } else {
        console.log('You must provide an amount and memo.');
      }
    } else if (command === 'search') {
      this.expenses.searchExpenses(argv[3]);
    } else if (command === 'delete') {
      this.expenses.deleteExpense(argv[3]);
    } else if(command === 'clear') {
      let rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });

      let question = 'This will remove all expenses. Are you sure? (enter y to confirm) ';
      rl.question(question, (answer) => {
        if (answer === 'y') {
          this.expenses.deleteAllExpenses();
        }
        rl.close();
      });
    } else {
      this.displayHelp();
    }
  }
}


let cli = new CLI();
cli.run(argv);