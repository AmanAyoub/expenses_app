#!/usr/bin/env node

const { Client } = require('pg');
const { argv } = require('node:process');
const COMMAND = argv[2];

const client = new Client({ database: 'expenses' });
const HELP_CONTENT = `An expense recording system

Commands:

add AMOUNT MEMO [DATE] - record a new expense
clear - delete all expenses
list - list all expenses
delete NUMBER - remove expense with id NUMBER
search QUERY - list expenses with a matching memo field
`;

async function listExpenses() {
  await client.connect().catch(error => logAndExit(error));

  let data = await client.query('SELECT * FROM expenses ORDER BY created_on ASC')
    .catch(error => logAndExit(error));
  data.rows.forEach(row => {
    let { id, amount, memo, created_on } = row;
    console.log(`${String(id).padStart(3)} | ${created_on.toDateString().padStart(10)} | ${amount.padStart(12)} | ${memo}`);
  });

  client.end().catch(error => logAndExit(error));
}

async function addExpense(amount, memo) {
  await client.connect().catch(error => logAndExit(error));
  let date = (new Date()).toLocaleDateString();
  let query = 'INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3) RETURNING *';
  let values = [amount, memo, date];
  await client.query(query, values)
    .catch(error => logAndExit(error));
  client.end().catch(error => logAndExit(error));
}

function displayHelpContent() {
  console.log(HELP_CONTENT);
}

function logAndExit(error) {
  console.log(error);
  process.exit(1);
}


if (COMMAND === 'list') {
  listExpenses();
} else if (COMMAND === 'add') {
  let [ amount, memo ] = argv.slice(3);
  if (amount && memo) {
    addExpense(amount, memo);
  } else {
    console.log('You must provide an amount and memo.');
  }
} else {
  displayHelpContent();
}